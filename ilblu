#!/usr/bin/env bash

# resolve shell-specifics
case "$(echo "$SHELL" | sed -E 's|/usr(/local)?||g')" in
    "/bin/zsh")
        RCPATH="$HOME/.zshrc"
        SOURCE="${BASH_SOURCE[0]:-${(%):-%N}}"
    ;;
    *)
        RCPATH="$HOME/.bashrc"
        if [[ -f "$HOME/.bash_aliases" ]]; then
            RCPATH="$HOME/.bash_aliases"
        fi
        SOURCE="${BASH_SOURCE[0]}"
    ;;
esac

# get base dir regardless of execution location
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SOURCE=$([[ "$SOURCE" = /* ]] && echo "$SOURCE" || echo "$PWD/${SOURCE#./}")
basedir=$(dirname "$SOURCE")
source "$basedir/scripts/functions.sh"

cd "$basedir/"

failed=0
case "$1" in
    "rb" | "rbp" | "rebuild")
    (
        if [ "$2" == "init" ]; then
            ./scripts/initupstream.sh "$basedir" || exit 1
        fi
        ./scripts/rebuildpatches.sh "$basedir" || exit 1
    ) || failed=1
    ;;
    "p" | "patch" | "apply")
    (
        if [ "$2" == "init" ]; then
            ./scripts/initupstream.sh "$basedir" || exit 1
        fi
        ./scripts/apply.sh "$basedir" || exit 1
    ) || failed=1
    ;;
    "mcdev" | "mcdevsrc")
    (
        if [ "$2" == "init" ]; then
            ./scripts/initupstream.sh "$basedir" || exit 1
        fi
        ./scripts/generatemcdevsrc.sh "$basedir" || exit 1
    ) || failed=1
    ;;
    "i" | "init")
    (
        ./scripts/initupstream.sh "$basedir" || exit 1
    ) || failed=1
    ;;
    "mergeup")
    (
        ./scripts/mergeupstream.sh "$basedir" || exit 1
    ) || failed=1
    ;;
    "sync" | "syncfork")
    (
        ./scripts/mergeupstream.sh "$basedir" || exit 1
    ) || failed=1
    ;;
    *)
        echo "Ilblu build tool command. This provides a variety of commands to build and manage the PaperMC build environment."
        echo ""
        echo " Commands:"
        echo "  * i, init           | Initialize Paper. Can be run from anywhere."
        echo "  * rb, rebuild       | Rebuild patches, can be called from anywhere."
        echo "  * p, patch, apply   | Apply all patches to top of Paper without building it. Can be run from anywhere."
        echo "  * mcdev, mcdevsrc   | Creates folder for mc src access. Can be run from anywhere."
        echo "  * mergeup           | Merge upstream paper and rebuild patches. Can be ran anywhere."
        echo "  * sync, syncfork    | Sync upstream ilblu and rebuild patches. Can be ran anywhere."
    ;;
esac

unset RCPATH
unset SOURCE
unset basedir
unset -f bashColor
unset -f bashColorReset
unset -f pushRepo

if [[ "$failed" == "1" ]]; then
	unset failed
	false
else
	unset failed
	true
fi
