import org.apache.tools.ant.filters.ReplaceTokens
import groovy.json.JsonSlurper

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0' apply false
    id 'com.github.dkorotych.gradle-maven-exec' version '2.2.1' apply false
}

group 'io.paul1365972.github'
version 'dev-SNAPSHOT'

task paperPaperclip(type: Exec, group: 'paper') {
    commandLine "$BASH_PATH", 'ilblu', 'jar'
}

task paperApplyPatches(type: Exec, group: 'paper') {
    commandLine "$BASH_PATH", 'ilblu', 'patch'
}

task paperApplyPatchesFast(type: Exec, group: 'paper') {
    commandLine "$BASH_PATH", 'ilblu', 'patch', 'fast'
}

task paperBuild(type: Exec, group: 'paper') {
    commandLine "$BASH_PATH", 'ilblu', 'build'
}

task paperRebuildPatches(type: Exec, group: 'paper') {
    commandLine "$BASH_PATH", 'ilblu', 'rebuild'
}

task paperUpstream(type: Exec, group: 'paper') {
    commandLine "$BASH_PATH", 'ilblu', 'upstream'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    // TODO propertyfy
    group 'io.github.paul1365972'
    version '1.15.2-R0.1-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_1_8

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifact shadowJar
            }
        }
    }

    processResources {
        filter ReplaceTokens, tokens: [FORK_NAME: FORK_NAME]

        into("META-INF/maven/$project.group/${project.name.toLowerCase()}") {
            from { generatePomFileForMavenPublication }
            rename ".*", "pom.xml"
        }
        into("META-INF/maven/$project.group/${project.name.toLowerCase()}") {
            from { generatePomProperties }
        }
    }

    task generatePomProperties(type: WriteProperties) {
        outputFile file("$buildDir/generated/pom.properties")
        comment 'Generated by Gradle'
        property 'artifactId', project.name.toLowerCase()
        property 'groupId', project.group
        property 'version', project.version
    }
}

task parseBuildData() {
    ext.mcver = ""
    def buildDataInfo = file("./$WORK_PATH/BuildData/info.json")
    inputs.file buildDataInfo
    doLast {
        ext.mcver = new JsonSlurper().parse(buildDataInfo)['minecraftVersion']
    }
}

task gitDescribeFork(type: Exec) {
    commandLine "$GIT_PATH", 'rev-parse', '--short', '--always', 'HEAD'
    standardOutput = new ByteArrayOutputStream()
    ext.output = { return standardOutput.toString().replaceAll("\\s", "") }
}
