import org.apache.tools.ant.filters.ReplaceTokens
import groovy.json.JsonSlurper

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0' apply false
    id 'com.github.dkorotych.gradle-maven-exec' version '2.2.1' apply false
}

group "$GROUP"
version 'dev-SNAPSHOT'

task ilbluInit(type: Exec, group: 'ilblu') {
    commandLine "$BASH_PATH", 'ilblu', 'init'
}

task ilbluApplyPatches(type: Exec, group: 'ilblu') {
    commandLine "$BASH_PATH", 'ilblu', 'patch'
}

task ilbluInitApply(type: Exec, group: 'ilblu') {
    commandLine "$BASH_PATH", 'ilblu', 'apply', 'init'
}

task ilbluRebuildPatches(type: Exec, group: 'ilblu') {
    commandLine "$BASH_PATH", 'ilblu', 'rebuild'
}

task ilbluGenerateMCDEVSRC(type: Exec, group: 'ilblu') {
    commandLine "$BASH_PATH", 'ilblu', 'mcdev'
}

task ilbluMergeUp(type: Exec, group: 'ilblu') {
    commandLine "$BASH_PATH", 'ilblu', 'mergeup'
}

task ilbluSync(type: Exec, group: 'ilblu') {
    commandLine "$BASH_PATH", 'ilblu', 'sync'
}

if ("true".equalsIgnoreCase(System.env.INIT_ON_STARTUP)) {
    println "Starting with SETUP_ON_STARTUP enabled"
    exec {
        commandLine "$BASH_PATH", 'ilblu', 'patch', 'init'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceCompatibility = JavaVersion.VERSION_1_8

    publishing {
        publications {
            maven(MavenPublication) {
                afterEvaluate {
                    artifactId project.name.toLowerCase()
                }
            }
        }
    }

    task processJava(type: Copy) {
        doFirst {
            delete destinationDir
        }
        from project.sourceSets.main.java
        into "$buildDir/generated/main/java"

        filter ReplaceTokens, tokens: [
                GROUP: GROUP,
                FORK_NAME: FORK_NAME,
                FORK_NAME_: FORK_NAME.toLowerCase(),
                GITHUB: GITHUB,
                BRANCH: BRANCH,
        ]
    }

    compileJava {
        source = tasks.processJava
    }

    processResources {
        filter ReplaceTokens, tokens: [FORK_NAME: FORK_NAME]

        into({ "META-INF/maven/${project.group}/${project.name.toLowerCase()}" }) {
            from { generatePomFileForMavenPublication }
            rename { "pom.xml" }
        }
        into({ "META-INF/maven/${project.group}/${project.name.toLowerCase()}" }) {
            from { generatePomProperties }
        }
    }

    task generatePomProperties(type: WriteProperties) {
        outputFile file("$buildDir/generated/pom.properties")
        comment 'Generated by Gradle'
        property 'artifactId', { project.name.toLowerCase() }
        property 'groupId', { project.group }
        property 'version', { project.version }
    }
}

task parseBuildData() {
    ext.mcver = ""
    def buildDataInfo = file("./$WORK_PATH/BuildData/info.json")
    inputs.file buildDataInfo
    doLast {
        ext.mcver = new JsonSlurper().parse(buildDataInfo)['minecraftVersion']
    }
}

task gitDescribeFork(type: Exec) {
    commandLine "$BASH_PATH", '-c', 'git rev-parse --short --always HEAD'
    standardOutput = new ByteArrayOutputStream()
    ext.output = { return standardOutput.toString().replaceAll("\\s", "") }
}
